rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin (safe version)
    function isAdmin() {
      return request.auth != null && 
        request.auth.token.role == 'admin';
    }
    
    // Fallback admin check using Firestore (only when custom claims not available)
    function isAdminByDocument() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Users collection
    match /users/{userId} {
      // Users can always read and write their own data
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
      
      // Admins can read and write all user data (for user management)
      allow read, write: if isAuthenticated() && (isAdmin() || isAdminByDocument());
      
      // Allow list/query operations for admins (needed for user management)
      allow list: if isAuthenticated() && (isAdmin() || isAdminByDocument());
    }
    
    // Movies collection - read access for all authenticated users, write access for admins only
    match /movies/{movieId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && (isAdmin() || isAdminByDocument());
      allow list: if isAuthenticated();
    }
    
    // Bookings collection
    match /bookings/{bookingId} {
      // Allow authenticated users to read individual bookings if they own them or are admin
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin() || isAdminByDocument());
      
      // Allow authenticated users to create bookings for themselves
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      
      // Allow users to update/delete their own bookings, admins can modify any
      allow update, delete: if isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAdmin() || isAdminByDocument());
      
      // Allow authenticated users to query bookings (needed for seat availability)
      // This allows filtering by movieId, showDate, showtime to get booked seats
      allow list: if isAuthenticated();
    }
    
    // Seats collection (if you want to store seat configurations separately)
    match /seats/{seatId} {
      allow read, list: if isAuthenticated();
      allow write: if isAuthenticated() && (isAdmin() || isAdminByDocument());
    }
    
    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
