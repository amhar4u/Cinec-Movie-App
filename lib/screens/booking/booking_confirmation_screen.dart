import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../models/movie_model.dart';
import '../../models/booking_model.dart';
import '../../services/booking_service.dart';
import '../../providers/auth_provider.dart';
import '../../theme/app_theme.dart';
import '../../widgets/custom_button.dart';
import '../../widgets/custom_text_field.dart';
import '../../utils/validation_utils.dart';

class BookingConfirmationScreen extends StatefulWidget {
  final Movie movie;
  final String selectedDate;
  final String selectedShowtime;
  final List<CinemaSeat> selectedSeats;
  final double totalAmount;

  const BookingConfirmationScreen({
    Key? key,
    required this.movie,
    required this.selectedDate,
    required this.selectedShowtime,
    required this.selectedSeats,
    required this.totalAmount,
  }) : super(key: key);

  @override
  State<BookingConfirmationScreen> createState() => _BookingConfirmationScreenState();
}

class _BookingConfirmationScreenState extends State<BookingConfirmationScreen> {
  final _formKey = GlobalKey<FormState>();
  final _phoneController = TextEditingController();
  final BookingService _bookingService = BookingService();
  bool _isLoading = false;

  @override
  void dispose() {
    _phoneController.dispose();
    super.dispose();
  }

  Future<void> _confirmBooking() async {
    if (!_formKey.currentState!.validate()) return;

    final authProvider = Provider.of<AuthProvider>(context, listen: false);
    final userModel = authProvider.userModel;

    if (userModel == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please login to continue'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    setState(() => _isLoading = true);

    try {
      // Check if seats are still available
      final seatIds = widget.selectedSeats.map((seat) => seat.id).toList();
      final areAvailable = await _bookingService.areSeatsAvailable(
        movieId: widget.movie.id,
        showDate: widget.selectedDate,
        showtime: widget.selectedShowtime,
        seatIds: seatIds,
      );

      if (!areAvailable) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('Some seats are no longer available. Please select different seats.'),
              backgroundColor: Colors.red,
            ),
          );
        }
        setState(() => _isLoading = false);
        return;
      }

      // Create booking
      final booking = MovieBooking(
        id: '', // Will be generated by Firestore
        userId: userModel.uid,
        movieId: widget.movie.id,
        movieTitle: widget.movie.title,
        moviePosterUrl: widget.movie.posterImageUrl,
        showDate: widget.selectedDate,
        showtime: widget.selectedShowtime,
        seatIds: seatIds,
        totalSeats: widget.selectedSeats.length,
        totalAmount: widget.totalAmount,
        userPhone: _phoneController.text.trim(),
        status: BookingStatus.confirmed,
        bookingDate: DateTime.now(),
      );

      final bookingId = await _bookingService.createBooking(booking);

      if (bookingId != null) {
        if (mounted) {
          // Show success dialog
          showDialog(
            context: context,
            barrierDismissible: false,
            builder: (context) => AlertDialog(
              title: const Text('Booking Confirmed!'),
              content: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const Icon(
                    Icons.check_circle,
                    color: Colors.green,
                    size: 64,
                  ),
                  const SizedBox(height: 16),
                  Text(
                    'Your booking for "${widget.movie.title}" has been confirmed.',
                    textAlign: TextAlign.center,
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'Booking ID: ${bookingId.substring(0, 8).toUpperCase()}',
                    style: const TextStyle(
                      fontWeight: FontWeight.bold,
                      color: AppTheme.primaryColor,
                    ),
                  ),
                ],
              ),
              actions: [
                TextButton(
                  onPressed: () {
                    Navigator.of(context).pop(); // Close dialog
                    Navigator.of(context).pop(); // Go back to seat selection
                    Navigator.of(context).pop(); // Go back to movie detail
                  },
                  child: const Text('OK'),
                ),
              ],
            ),
          );
        }
      } else {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('Failed to create booking. Please try again.'),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error creating booking: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final authProvider = Provider.of<AuthProvider>(context);
    final userModel = authProvider.userModel;

    return Scaffold(
      appBar: AppBar(
        title: const Text('Confirm Booking'),
        backgroundColor: AppTheme.primaryColor,
        foregroundColor: Colors.white,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Movie info card
              Card(
                elevation: 4,
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Row(
                    children: [
                      // Movie poster
                      ClipRRect(
                        borderRadius: BorderRadius.circular(8),
                        child: widget.movie.posterImageUrl.isNotEmpty
                            ? Image.network(
                                widget.movie.posterImageUrl,
                                width: 80,
                                height: 120,
                                fit: BoxFit.cover,
                                errorBuilder: (context, error, stackTrace) =>
                                    Container(
                                  width: 80,
                                  height: 120,
                                  color: Colors.grey[300],
                                  child: const Icon(Icons.movie),
                                ),
                              )
                            : Container(
                                width: 80,
                                height: 120,
                                color: Colors.grey[300],
                                child: const Icon(Icons.movie),
                              ),
                      ),
                      const SizedBox(width: 16),
                      
                      // Movie details
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              widget.movie.title,
                              style: const TextStyle(
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            const SizedBox(height: 8),
                            Row(
                              children: [
                                const Icon(Icons.calendar_today, size: 16),
                                const SizedBox(width: 4),
                                Text(widget.selectedDate),
                              ],
                            ),
                            const SizedBox(height: 4),
                            Row(
                              children: [
                                const Icon(Icons.access_time, size: 16),
                                const SizedBox(width: 4),
                                Text(widget.selectedShowtime),
                              ],
                            ),
                            const SizedBox(height: 4),
                            Text(
                              widget.movie.genre,
                              style: TextStyle(color: Colors.grey[600]),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
              ),

              const SizedBox(height: 24),

              // Booking details
              const Text(
                'Booking Details',
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 16),

              Card(
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    children: [
                      _buildDetailRow('Selected Seats', 
                          widget.selectedSeats.map((s) => s.seatLabel).join(', ')),
                      const SizedBox(height: 12),
                      _buildDetailRow('Number of Seats', 
                          '${widget.selectedSeats.length}'),
                      const SizedBox(height: 12),
                      _buildDetailRow('Seat Prices', 
                          widget.selectedSeats.map((s) => 'Rs. ${s.price.toStringAsFixed(0)}').join(', ')),
                      const Divider(height: 24),
                      _buildDetailRow('Total Amount', 
                          'Rs. ${widget.totalAmount.toStringAsFixed(0)}',
                          isTotal: true),
                    ],
                  ),
                ),
              ),

              const SizedBox(height: 24),

              // User information
              const Text(
                'Contact Information',
                style: TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 16),

              // User name (read-only)
              CustomTextField(
                label: 'Name',
                initialValue: userModel?.name ?? '',
                enabled: false,
              ),
              const SizedBox(height: 16),

              // User email (read-only)
              CustomTextField(
                label: 'Email',
                initialValue: userModel?.email ?? '',
                enabled: false,
              ),
              const SizedBox(height: 16),

              // Phone number (editable)
              CustomTextField(
                controller: _phoneController,
                label: 'Phone Number',
                hint: 'Enter your phone number',
                keyboardType: TextInputType.phone,
                validator: ValidationUtils.validatePhoneNumber,
              ),

              const SizedBox(height: 32),

              // Important note
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.blue[50],
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.blue[200]!),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.info, color: Colors.blue[600]),
                        const SizedBox(width: 8),
                        const Text(
                          'Important Information',
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    const Text(
                      '• Please arrive at the cinema 15 minutes before showtime\n'
                      '• Bring a valid ID for verification\n'
                      '• Your booking can be cancelled up to 2 hours before showtime\n'
                      '• No outside food or beverages allowed',
                      style: TextStyle(fontSize: 14),
                    ),
                  ],
                ),
              ),

              const SizedBox(height: 32),

              // Confirm booking button
              SizedBox(
                width: double.infinity,
                child: CustomButton(
                  text: 'Confirm Booking',
                  onPressed: _isLoading ? null : _confirmBooking,
                  isLoading: _isLoading,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildDetailRow(String label, String value, {bool isTotal = false}) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(
          label,
          style: TextStyle(
            fontWeight: isTotal ? FontWeight.bold : FontWeight.w500,
            fontSize: isTotal ? 16 : 14,
          ),
        ),
        Text(
          value,
          style: TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: isTotal ? 18 : 14,
            color: isTotal ? AppTheme.primaryColor : null,
          ),
        ),
      ],
    );
  }
}
